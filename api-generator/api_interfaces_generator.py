class APIInterfacesGenerator:
    def __init__(self, core_functions, imports, tags):
        self.core_functions = core_functions
        self.tags = tags
        self.imports = [
            imports['model'] + '\n',
            imports['tokenauth']
        ]

    def generate(self, destination_path):
        data = ''
        with open(destination_path, 'w') as file:
            data += self.create_header_and_imports()
            data += self.create_interfaces()
            file.write(data)

    def create_header_and_imports(self):
        data = '// Code generated by api-generator DO NOT EDIT.\n'
        data += 'package interfaces\n\n'
        data += 'import (\n'
        for str in self.imports:
            data += str + '\n'
        return data + ')\n'

    def create_interfaces(self):
        data = ''
        for tag, comment in self.tags.items():
            data += f'// {tag} exposes {comment} APIs to the driver adapters\n'
            data += f'type {tag} interface {{'

            data_types = []
            for core_function in self.core_functions:
                if core_function['tag'] == tag:
                    data_type = core_function["data_type"]
                    request_type = core_function["request_type"]
                    if data_types.count(data_type) == 0:
                        data += f'\n// {data_type}\n\n'
                        data_types.append(data_type)
                    if core_function['auth_type']:
                        data += f'{core_function["name"]}{core_function["interface_prototype"]}\n'.replace('{data_type}', data_type).replace('{request_type}', request_type)
                    else:
                        data += f'{core_function["name"]}{core_function["interface_prototype"]}\n'.replace('{data_type}', data_type).replace('{request_type}', request_type)
            data += '}\n\n'
        return data
